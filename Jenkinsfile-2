pipeline {
  agent any
  stages {
    stage('Set Default Docker Context') {
            steps {
                sh 'docker context use default'
            }
            }
    stage('checkout code- github') {
      steps {
        git(url: 'https://github.com/ofirzvishaboo/flask_devop_project.git', branch: 'master')
      }
    }

    stage('Install Requirements') {
            steps {
                // Install pip packages or other dependencies if needed
                sh 'pip3 install -r requirements.txt'
            }
        }

    stage('run rest_app') {
      steps {
        sh 'python3 rest_app.py &'
      }
    }

    stage('run backend_testing') {
      steps {
        sh 'python3 backend_testing.py'
      }
    }

    stage('run clean_environment') {
      steps {
        sh 'python3 clean_environment.py'
      }
    }

    stage('Build Docker Image - Locally') {
      steps {
          // Build Docker image locally
        sh 'docker build -t ofirzvishaboo/flask_name_api .'
        }
    }

    stage('Push Docker Image to Hub') {
      steps {
        // Log in to Docker Hub
        withDockerRegistry([credentialsId: 'ofir-dockerhub', url: 'https://registry.hub.docker.com']) {
        sh 'docker push ofirzvishaboo/flask_name_api:latest'
        }
      }
    }

    stage('Set Compose Image Version') {
      steps {
        // Set version inside .env file for docker-compose
        sh 'echo IMAGE_TAG=${BUILD_NUMBER} > .env'
      }
    }

    stage('Run Docker Compose Up') {
      steps {
        sh 'docker-compose up -d'
      }
    }

    stage('Test Dockerized App') {
      steps {

        // Test dockerized app using docker_backend_testing.py
        sh 'python3 docker_backend_testing.py'
      }
    }

    stage('Clean Environment') {
      steps {
        sh 'docker-compose down'
        sh 'docker rmi ofirzvishaboo/flask_name_api:latest'
      }
    }
    stage('Deploy HELM Chart') {
    steps {
        script {
            // Check if Helm is already installed
            def helmInstalled = sh(script: 'command -v helm', returnStatus: true) == 0
            if (!helmInstalled) {
                // Download and install Helm
                sh 'curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod +x get_helm.sh && ./get_helm.sh'
            }
            // Deploy HELM chart with image version
            sh 'helm install my-app K8S/mychart --set image.version=ofirzvishaboo/flask_name_api:${BUILD_NUMBER} --version 1.0.0'
        }
    }
    }
    stage('Write Service URL') {
      steps {
        sh 'minikube service hello-python-service --url > k8s_url.txt'
      }
    }

    stage('Test Deployed App') {
      steps {
        // Use K8S_backend_testing.py with service URL from k8s_url.txt
        sh 'python3 K8S_backend_testing.py ${WORKSPACE}/k8s_url.txt'
      }
    }

    stage('Clean HELM Environment') {
      steps {
        sh 'helm delete my-app'
      }
    }
  }
}
